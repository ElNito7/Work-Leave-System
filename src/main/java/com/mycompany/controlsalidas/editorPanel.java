/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.controlsalidas;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.sql.Time;
import java.time.LocalDate;
import java.util.List;
import java.util.Properties;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

/**
 *
 * @author Keloc
 */
public class editorPanel extends javax.swing.JPanel {

    /**
     * Creates new form editorPanel
     */
    private JDatePickerImpl dp = setDateP();
    private String adm;
    private String del;
    public editorPanel(String adm, String del) {
        initComponents();
        cambiarVista(viewDefs);
        initDefsTable();
        addPanel.initTime(horaEdit);
        dateP.add(dp);
        this.adm  = adm;
        this.del = del;
    }

    public JComboBox<String> getDefsEdit() {
        return defsEdit;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initDefsTable(){
        Session session = HibernateUtil.getSessionFactory().openSession();
        List<Defensor> defensores;
        try{
            session.beginTransaction();
            //filtrar
            defensores = session.createQuery("From Defensor d order by d.nombre asc", Defensor.class).list();
            setTable(defensores);
            session.getTransaction().commit();
            session.close();
        } catch(Exception e){
            if (session.getTransaction() != null) {
                session.getTransaction().rollback();
            }
            e.printStackTrace();
        } finally {
                session.close();
        }
    }
    
    private void initSalsTable(String nom){
        Session session = HibernateUtil.getSessionFactory().openSession();
        List<Salida> salidas;
        try{
            session.beginTransaction();
            //filtrar
            salidas = session.createQuery("select s from Salida s join s.defensor d where d.nombre like :n order by s.fecha desc", Salida.class)
            .setParameter("n", "%"+nom+"%").getResultList();
            
            setSals(salidas);
            session.getTransaction().commit();
            session.close();
        } catch(Exception e){
            if (session.getTransaction() != null) {
                session.getTransaction().rollback();
            }
            e.printStackTrace();
        } finally {
                session.close();
        }
    }
    
    private void setTable(List<Defensor> l){
        String[] tblH = {"No.", "DEFENSOR", "CORREO"};
        DefaultTableModel model = new DefaultTableModel(tblH, 0);
        int i = 1;
        for(Defensor d:l){
            Object[] row = {i, d.getNombre(), d.getEmail()};
            model.addRow(row);
            i++;
        }
        defsTable.setModel(model);
    }
    
    private void setSals(List<Salida> l){
        String[] tblH = {"CONS.","SERVIDOR PUBLICO","FECHA","HORA SALIDA","TIPO DE DILIGENCIA","LUGAR","EXPEDIENTE DE CONTROL","TIEMPO APROX. DE DURACIÃ“N"};
        DefaultTableModel model = new DefaultTableModel(tblH, 0);
        int i = 1;
        String nom;
        for(Salida s:l){
            if (s.getDefId() == null){
                nom = s.getEliminado().toUpperCase();
            } else {
                nom = s.getDefId().getNombre().toUpperCase();
            }
            Object[] row = {i, nom, s.getFecha(), s.getHora(), s.getDiligencia().toUpperCase(), s.getLugar().toUpperCase(), s.getExpediente().toUpperCase(), s.getDuracion().toUpperCase()};
            model.addRow(row);
            i++;
        }
        salsTable.setModel(model);
    }
    
    
    public static JDatePickerImpl setDateP(){
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        
        UtilDateModel model = new UtilDateModel();
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        return new JDatePickerImpl(datePanel, new DateLabelFormatter());
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomReg = new javax.swing.JTextField();
        correoReg = new javax.swing.JTextField();
        editP = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        editNom = new javax.swing.JTextField();
        editC = new javax.swing.JTextField();
        viewDefs = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        defsTable = new javax.swing.JTable();
        addDefBtn = new javax.swing.JButton();
        editDefBtn = new javax.swing.JButton();
        delDefBtn = new javax.swing.JButton();
        salsBtn = new javax.swing.JButton();
        exportTableBtn = new javax.swing.JButton();
        changePassBtn = new javax.swing.JButton();
        dbConfig = new javax.swing.JButton();
        viewSalidas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salsTable = new javax.swing.JTable();
        editSalBtn = new javax.swing.JButton();
        defsBtn = new javax.swing.JButton();
        delSalBtn = new javax.swing.JButton();
        editSals = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        defsEdit = new javax.swing.JComboBox<>();
        diliEdit = new javax.swing.JTextField();
        lugarEdit = new javax.swing.JTextField();
        expEdit = new javax.swing.JTextField();
        tiempoEdit = new javax.swing.JTextField();
        horaEdit = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        dateP = new javax.swing.JPanel();
        passP = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        adminPass = new javax.swing.JPasswordField();
        delPass = new javax.swing.JPasswordField();
        toggleAdminPass = new javax.swing.JToggleButton();
        toggleDelPass = new javax.swing.JToggleButton();
        dbConfigP = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        urlTF = new javax.swing.JTextField();
        usuarioTF = new javax.swing.JTextField();
        dbContra = new javax.swing.JPasswordField();
        dbContraT = new javax.swing.JToggleButton();
        view = new javax.swing.JPanel();

        jLabel1.setText("Nombre:");

        jLabel2.setText("Correo:");

        javax.swing.GroupLayout addPLayout = new javax.swing.GroupLayout(addP);
        addP.setLayout(addPLayout);
        addPLayout.setHorizontalGroup(
            addPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(addPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addPLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(correoReg))
                    .addGroup(addPLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomReg, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        addPLayout.setVerticalGroup(
            addPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(addPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nomReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(correoReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel3.setText("Nombre:");

        jLabel4.setText("Correo:");

        javax.swing.GroupLayout editPLayout = new javax.swing.GroupLayout(editP);
        editP.setLayout(editPLayout);
        editPLayout.setHorizontalGroup(
            editPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(editPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(editPLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(editC))
                    .addGroup(editPLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editNom, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        editPLayout.setVerticalGroup(
            editPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(editPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(editNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(editPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(editC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        viewDefs.setBackground(new java.awt.Color(255, 255, 255));

        defsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "DEFENSOR", "CORREO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(defsTable);

        addDefBtn.setText("AÃ±adir");
        addDefBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDefBtnActionPerformed(evt);
            }
        });

        editDefBtn.setText("Editar");
        editDefBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDefBtnActionPerformed(evt);
            }
        });

        delDefBtn.setText("Eliminar");
        delDefBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delDefBtnActionPerformed(evt);
            }
        });

        salsBtn.setText("Inspeccionar Salidas");
        salsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salsBtnActionPerformed(evt);
            }
        });

        exportTableBtn.setText("Exportar Tabla");
        exportTableBtn.setPreferredSize(new java.awt.Dimension(205, 45));
        exportTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTableBtnActionPerformed(evt);
            }
        });

        changePassBtn.setText("Cambiar ContraseÃ±as");
        changePassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePassBtnActionPerformed(evt);
            }
        });

        dbConfig.setText("Configurar Base de Datos");
        dbConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewDefsLayout = new javax.swing.GroupLayout(viewDefs);
        viewDefs.setLayout(viewDefsLayout);
        viewDefsLayout.setHorizontalGroup(
            viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewDefsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(viewDefsLayout.createSequentialGroup()
                        .addGroup(viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dbConfig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(salsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addDefBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editDefBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                            .addComponent(exportTableBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delDefBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(changePassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))))
                .addContainerGap())
        );
        viewDefsLayout.setVerticalGroup(
            viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewDefsLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addDefBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delDefBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editDefBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportTableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(viewDefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(salsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(changePassBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dbConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        viewSalidas.setBackground(new java.awt.Color(255, 255, 255));
        viewSalidas.setMinimumSize(new java.awt.Dimension(810, 560));
        viewSalidas.setPreferredSize(new java.awt.Dimension(810, 560));

        salsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CONS.", "DEFENSOR", "FECHA", "HORA SALIDA", "TIPO DE DILIGENCIA", "LUGAR", "EXP.DE CONTROL", "TIEMPO APROX. DE DURACIÃ“N"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(salsTable);

        editSalBtn.setText("Editar");
        editSalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSalBtnActionPerformed(evt);
            }
        });

        defsBtn.setText("Ver Defensores");
        defsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defsBtnActionPerformed(evt);
            }
        });

        delSalBtn.setText("Eliminar");
        delSalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delSalBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewSalidasLayout = new javax.swing.GroupLayout(viewSalidas);
        viewSalidas.setLayout(viewSalidasLayout);
        viewSalidasLayout.setHorizontalGroup(
            viewSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewSalidasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                    .addGroup(viewSalidasLayout.createSequentialGroup()
                        .addComponent(defsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(editSalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(delSalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewSalidasLayout.setVerticalGroup(
            viewSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewSalidasLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(defsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(editSalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(delSalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(230, 230, 230))
        );

        jLabel5.setText("DEFENSOR");

        jLabel6.setText("HORA SALIDA");

        jLabel7.setText("TIPO DE DILIGENCIA");

        jLabel8.setText("LUGAR");

        jLabel9.setText("EXPEDIENTE DE CONTROL");

        jLabel10.setText("TIEMPO APROXIMADO DE DURACIÃ“N");

        jLabel11.setText("FECHA");

        dateP.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout editSalsLayout = new javax.swing.GroupLayout(editSals);
        editSals.setLayout(editSalsLayout);
        editSalsLayout.setHorizontalGroup(
            editSalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editSalsLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(editSalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(diliEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                    .addComponent(lugarEdit)
                    .addComponent(expEdit)
                    .addComponent(tiempoEdit)
                    .addComponent(horaEdit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(defsEdit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel11)
                    .addComponent(dateP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        editSalsLayout.setVerticalGroup(
            editSalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editSalsLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(defsEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dateP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(horaEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diliEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lugarEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tiempoEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        jLabel12.setText("ADMIN:");

        jLabel13.setText("DELEGADO:");

        adminPass.setText("jPasswordField1");

        delPass.setText("jPasswordField2");

        toggleAdminPass.setText("Mostrar");
        toggleAdminPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleAdminPassActionPerformed(evt);
            }
        });

        toggleDelPass.setText("Mostrar");
        toggleDelPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleDelPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout passPLayout = new javax.swing.GroupLayout(passP);
        passP.setLayout(passPLayout);
        passPLayout.setHorizontalGroup(
            passPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passPLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(passPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(passPLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(delPass))
                    .addGroup(passPLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(adminPass, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(passPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toggleAdminPass)
                    .addComponent(toggleDelPass))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        passPLayout.setVerticalGroup(
            passPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passPLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(passPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(adminPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleAdminPass))
                .addGap(28, 28, 28)
                .addGroup(passPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(delPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleDelPass))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jLabel14.setText("URL:");

        jLabel15.setText("USUARIO:");

        jLabel16.setText("CONTRASEÃ‘A:");

        dbContraT.setText("Mostrar");
        dbContraT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbContraTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dbConfigPLayout = new javax.swing.GroupLayout(dbConfigP);
        dbConfigP.setLayout(dbConfigPLayout);
        dbConfigPLayout.setHorizontalGroup(
            dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbConfigPLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dbContraT)
                    .addGroup(dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(dbConfigPLayout.createSequentialGroup()
                            .addComponent(jLabel16)
                            .addGap(18, 18, 18)
                            .addComponent(dbContra))
                        .addGroup(dbConfigPLayout.createSequentialGroup()
                            .addGroup(dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel14)
                                .addComponent(jLabel15))
                            .addGap(45, 45, 45)
                            .addGroup(dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(urlTF)
                                .addComponent(usuarioTF, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        dbConfigPLayout.setVerticalGroup(
            dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbConfigPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(urlTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(usuarioTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dbConfigPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(dbContra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbContraT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setMinimumSize(new java.awt.Dimension(810, 560));

        view.setMinimumSize(new java.awt.Dimension(810, 560));
        view.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addDefBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDefBtnActionPerformed
        int res = JOptionPane.showConfirmDialog(null, addP, "Agreando Defensor", JOptionPane.OK_CANCEL_OPTION);
        if (res == JOptionPane.OK_OPTION){
            if (nomReg.getText().isBlank() || correoReg.getText().isBlank()){
                JOptionPane.showMessageDialog(null, "Complete todos los espacios");
            } else {
                String nombre = nomReg.getText();
                String correo = correoReg.getText();
                Defensor def = new Defensor(nombre, correo);
                Session session = HibernateUtil.getSessionFactory().openSession();
                try {
                    session.beginTransaction();
                    session.save(def);
                    session.getTransaction().commit();
                    session.close();
                    JOptionPane.showMessageDialog(null, "Defensor Agredado Satisfactoriamente");
                    nomReg.setText("");
                    correoReg.setText("");
                    initDefsTable();;
                } catch(Exception e){
                    if (session.getTransaction() != null) {
                        session.getTransaction().rollback();
                    }
                    e.printStackTrace();
                } finally {
                    session.close();
                }
            }
        }
    }//GEN-LAST:event_addDefBtnActionPerformed

    private void editDefBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDefBtnActionPerformed
        int row = defsTable.getSelectedRow();
        if (row == -1){
            JOptionPane.showMessageDialog(null, "Selecciona una fila para editar");
        } else {
            String nom = (String) defsTable.getValueAt(row, 1);
            String c = (String) defsTable.getValueAt(row, 2);
            editNom.setText(nom);
            editC.setText(c);
            int res = JOptionPane.showConfirmDialog(null, editP, "ActualizaciÃ³n de datos", JOptionPane.OK_CANCEL_OPTION);
            if (res == JOptionPane.OK_OPTION){
                Session session = HibernateUtil.getSessionFactory().openSession();
                try {
                    session.beginTransaction();
                    List<Defensor> defs = session.createQuery("From Defensor", Defensor.class).list();
                    for (Defensor d:defs){
                        if (d.getNombre().equals(nom)){
                            d.setNombre(editNom.getText());
                            d.setEmail(editC.getText());
                            session.update(d);
                        }
                    }
                    session.getTransaction().commit();
                    session.close();
                    initDefsTable();
                    JOptionPane.showMessageDialog(null, "Datos actualizados satisfactoriamente");
                } catch(Exception e){
                    if (session.getTransaction() != null) {
                        session.getTransaction().rollback();
                    }
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, e.getMessage());
                } finally {
                    session.close();
                }
            }
        }
    }//GEN-LAST:event_editDefBtnActionPerformed

    private void delDefBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delDefBtnActionPerformed
        int row = defsTable.getSelectedRow();
        if (row == -1){
            JOptionPane.showMessageDialog(null, "Selecciona una fila para eliminar");
        } else {
            int res = JOptionPane.showConfirmDialog(null, "Esta acciÃ³n eliminarÃ¡ al defensor seleccionado, Â¿Desea continuar?", "ConfirmaciÃ³n", JOptionPane.OK_CANCEL_OPTION);
            if (res == JOptionPane.OK_OPTION){
                String nom = (String) defsTable.getValueAt(row, 1);
                Session session = HibernateUtil.getSessionFactory().openSession();
                try {
                    session.beginTransaction();
                    List<Defensor> defs = session.createQuery("From Defensor", Defensor.class).list();
                    for (Defensor d:defs){
                        if (d.getNombre().equals(nom)){
                            List<Salida> sals = session.createQuery("select s from Salida s join s.defensor d where d.id = :id", Salida.class)
                            .setParameter("id", d.getId()).getResultList();
                            for (Salida s:sals){
                                s.setEliminado(d.getNombre());
                                s.setDefId(null);
                                session.update(s);
                            }
                            session.delete(d);
                        }
                    }
                    session.getTransaction().commit();
                    session.close();
                    initDefsTable();
                    JOptionPane.showMessageDialog(null, "Defensor eliminado satisfactoriamente");
                } catch(Exception e){
                    if (session.getTransaction() != null) {
                        session.getTransaction().rollback();
                    }
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, e.getMessage());
                } finally {
                    session.close();
                }
            }
        }
    }//GEN-LAST:event_delDefBtnActionPerformed

    private void salsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salsBtnActionPerformed
        int row = defsTable.getSelectedRow();
        if (row == -1){
             JOptionPane.showMessageDialog(null, "Selecciona un defensor para inspeccionar");
        } else {
            String nom = (String) defsTable.getValueAt(row, 1);
            initSalsTable(nom);
            cambiarVista(viewSalidas);
        }
    }//GEN-LAST:event_salsBtnActionPerformed

    private void exportTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTableBtnActionPerformed
        gui.exportTable(defsTable);
    }//GEN-LAST:event_exportTableBtnActionPerformed

    private void defsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defsBtnActionPerformed
        cambiarVista(viewDefs);
    }//GEN-LAST:event_defsBtnActionPerformed

    private void editSalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSalBtnActionPerformed
        int row = salsTable.getSelectedRow();
        if (row == -1){
            JOptionPane.showMessageDialog(null, "Selecciona una fila para editar");
        } else {
            defsEdit.setSelectedItem((String) salsTable.getValueAt(row, 1));
            LocalDate date = (LocalDate) salsTable.getValueAt(row, 2);
            dp.getModel().setDate(date.getYear(), date.getMonthValue()-1, date.getDayOfMonth());
            dp.getModel().setSelected(true);
            horaEdit.setSelectedItem(salsTable.getValueAt(row, 3).toString());
            diliEdit.setText( (String) salsTable.getValueAt(row, 4));
            lugarEdit.setText( (String) salsTable.getValueAt(row, 5));
            expEdit.setText( (String) salsTable.getValueAt(row, 6));
            tiempoEdit.setText( (String) salsTable.getValueAt(row, 7));
            Session session = HibernateUtil.getSessionFactory().openSession();
            try {
                session.beginTransaction();
                List<Salida> salidas = session.createQuery("From Salida", Salida.class).list();
                int res = JOptionPane.showConfirmDialog(null, editSals, "ActualizaciÃ³n de datos", JOptionPane.OK_CANCEL_OPTION);
                if (res == JOptionPane.OK_OPTION){
                    String def = defsEdit.getSelectedItem().toString();
                    Defensor d = session.createQuery("From Defensor d where d.nombre = :n", Defensor.class)
                    .setParameter("n", def).uniqueResult();
                    LocalDate fechaSelect = LocalDate.of(dp.getModel().getYear(), dp.getModel().getMonth()+1, dp.getModel().getDay());
                    Time t = Time.valueOf(horaEdit.getSelectedItem().toString());
                    String dil = diliEdit.getText();
                    String lugar = lugarEdit.getText();
                    String exp = expEdit.getText();
                    String dura = tiempoEdit.getText();
                    for (Salida s:salidas){
                        String nom;
                        if (s.getDefId() == null){
                            nom = s.getEliminado();
                        } else {
                            nom = s.getDefId().getNombre();
                        }
                        if (nom.equals(salsTable.getValueAt(row, 1).toString()) && s.getFecha().isEqual(date) && s.getHora().equals(salsTable.getValueAt(row, 3))){
                            s.setDefId(d);
                            s.setFecha(fechaSelect);
                            s.setHora(t);
                            s.setDiligencia(dil);
                            s.setLugar(lugar);
                            s.setExpediente(exp);
                            s.setDuracion(dura);
                            session.update(s);
                            JOptionPane.showMessageDialog(null, "Datos Actualizados Satisfactoriamente");
                        }
                    }
                    session.getTransaction().commit();
                    session.close();
                    initSalsTable((String) salsTable.getValueAt(row, 1));
                }
            } catch(Exception e){
                if (session.getTransaction() != null) {
                    session.getTransaction().rollback();
                }
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e.getMessage());
            } finally {
                session.close();
            }
        }
    }//GEN-LAST:event_editSalBtnActionPerformed

    private void delSalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delSalBtnActionPerformed
        int row = salsTable.getSelectedRow();
        if (row == -1){
            JOptionPane.showMessageDialog(null, "Selecciona una fila para eliminar");
        } else {
            int res = JOptionPane.showConfirmDialog(null, "Esta acciÃ³n eliminarÃ¡ la salida seleccionada, Â¿Desea continuar?", "ConfirmaciÃ³n", JOptionPane.OK_CANCEL_OPTION);
            if (res == JOptionPane.OK_OPTION){
                Session session = HibernateUtil.getSessionFactory().openSession();
                String n = (String) salsTable.getValueAt(row, 1);
                try {
                    session.beginTransaction();
                    List<Salida> salidas = session.createQuery("From Salida", Salida.class).list();
                    LocalDate date = (LocalDate) salsTable.getValueAt(row, 2);
                    for (Salida s:salidas){
                        String nom;
                        if (s.getDefId() == null){
                            nom = s.getEliminado();
                        } else {
                            nom = s.getDefId().getNombre();
                        }
                        if (nom.equals(salsTable.getValueAt(row, 1).toString()) && s.getFecha().isEqual(date) && s.getHora().equals(salsTable.getValueAt(row, 3))){
                            session.delete(s);
                        }
                    }
                    session.getTransaction().commit();
                    session.close();
                    initSalsTable(n);
                } catch(Exception e){
                    if (session.getTransaction() != null) {
                        session.getTransaction().rollback();
                    }
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, e.getMessage());
                } finally {
                    session.close();
                }
            }
        }
    }//GEN-LAST:event_delSalBtnActionPerformed

    private void changePassBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassBtnActionPerformed
        adminPass.setText(adm);
        delPass.setText(del);
        int res = JOptionPane.showConfirmDialog(null, passP, "Cambiar ContraseÃ±as", JOptionPane.OK_CANCEL_OPTION);
        if (res == JOptionPane.OK_OPTION){
            adm = new String(adminPass.getPassword());
            del = new String(delPass.getPassword());
            System.out.println("ADMIN: "+adm);
            System.out.println("DELEGADO: "+del);
            Session session = HibernateUtil.getSessionFactory().openSession();
            try {
                session.beginTransaction();
                List<Pass> contras = session.createQuery("From Pass", Pass.class).list();
                for (Pass p:contras){
                    if (p.getId()==1){
                        p.setPassword(adm);
                    } else {
                        p.setPassword(del);
                    }
                    session.update(p);
                }
                session.getTransaction().commit();
                session.close();
            } catch(Exception e){
                if (session.getTransaction() != null) {
                    session.getTransaction().rollback();
                }
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e.getMessage());
            } finally {
                session.close();
            }
            JOptionPane.showMessageDialog(null, "ContraseÃ±as Actualizadas");
        }
    }//GEN-LAST:event_changePassBtnActionPerformed

    private void toggleAdminPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleAdminPassActionPerformed
       gui.togglePass(adminPass, toggleAdminPass);
    }//GEN-LAST:event_toggleAdminPassActionPerformed

    private void toggleDelPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleDelPassActionPerformed
        gui.togglePass(delPass, toggleDelPass);
    }//GEN-LAST:event_toggleDelPassActionPerformed

    private void dbContraTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbContraTActionPerformed
        gui.togglePass(dbContra, dbContraT);
    }//GEN-LAST:event_dbContraTActionPerformed

    private void dbConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbConfigActionPerformed
        int res = JOptionPane.showConfirmDialog(null, dbConfigP, "Cofigurar Base de Datos", JOptionPane.OK_CANCEL_OPTION);
        if (res == JOptionPane.OK_OPTION){
            String url = urlTF.getText();
            String user = usuarioTF.getText();
            String pass = new String(dbContra.getPassword());
            saveConfig(url, user, pass);
        }
    }//GEN-LAST:event_dbConfigActionPerformed

    private void cambiarVista(JPanel p){
        SwingUtilities.invokeLater(() -> {
            p.setPreferredSize(new Dimension(view.getWidth(), view.getHeight()));
            p.setLocation(0, 0);
            view.removeAll();
            view.add(p, BorderLayout.CENTER);
            view.revalidate();
            view.repaint();
        });
    }
    
    
    
    private void saveConfig(String url, String user, String pass){
        try {
            String write = HibernateUtil.generateConfigContent(url, user, pass);
            HibernateUtil.writeFile("C://salidas-hibernate/hibernate.cfg.xml", write);
            JOptionPane.showMessageDialog(null, "Cambios guardados");
            HibernateUtil.newConnection();
            testConnection();
        } catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void testConnection(){
        Session session  = HibernateUtil.getSessionFactory().openSession();
        try {
            session.beginTransaction();
            if (session.isConnected()){
                JOptionPane.showMessageDialog(null, "Â¡ConexiÃ³n a la Base de Datos exitosa! Por favor reinicie el sistema para ver los cambios");
            } else {
                JOptionPane.showMessageDialog(null, "ConexiÃ³n a la Base de Datos fallida...");
            }
            session.getTransaction().commit();
        } catch(Exception e){
            if (session.getTransaction() != null) {
               session.getTransaction().rollback();
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
           session.close();
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDefBtn;
    private javax.swing.JPanel addP;
    private javax.swing.JPasswordField adminPass;
    private javax.swing.JButton changePassBtn;
    private javax.swing.JTextField correoReg;
    private javax.swing.JPanel dateP;
    private javax.swing.JButton dbConfig;
    private javax.swing.JPanel dbConfigP;
    private javax.swing.JPasswordField dbContra;
    private javax.swing.JToggleButton dbContraT;
    private javax.swing.JButton defsBtn;
    private javax.swing.JComboBox<String> defsEdit;
    private javax.swing.JTable defsTable;
    private javax.swing.JButton delDefBtn;
    private javax.swing.JPasswordField delPass;
    private javax.swing.JButton delSalBtn;
    private javax.swing.JTextField diliEdit;
    private javax.swing.JTextField editC;
    private javax.swing.JButton editDefBtn;
    private javax.swing.JTextField editNom;
    private javax.swing.JPanel editP;
    private javax.swing.JButton editSalBtn;
    private javax.swing.JPanel editSals;
    private javax.swing.JTextField expEdit;
    private javax.swing.JButton exportTableBtn;
    private javax.swing.JComboBox<String> horaEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lugarEdit;
    private javax.swing.JTextField nomReg;
    private javax.swing.JPanel passP;
    private javax.swing.JButton salsBtn;
    private javax.swing.JTable salsTable;
    private javax.swing.JTextField tiempoEdit;
    private javax.swing.JToggleButton toggleAdminPass;
    private javax.swing.JToggleButton toggleDelPass;
    private javax.swing.JTextField urlTF;
    private javax.swing.JTextField usuarioTF;
    private javax.swing.JPanel view;
    private javax.swing.JPanel viewDefs;
    private javax.swing.JPanel viewSalidas;
    // End of variables declaration//GEN-END:variables
}
